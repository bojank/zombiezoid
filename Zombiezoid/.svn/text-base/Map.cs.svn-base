using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Audio;
using System.IO;
using Microsoft.Xna.Framework.Input;

namespace Zombiezoid
{
    class Map : IDisposable
    {
        private Tile[,] tiles;


        public ProjectileManager ProjectileManager
        {
            get { return projectileManager; }
        }
        private ProjectileManager projectileManager;

        private const int EntityLayer = 2;

        public Player Player
        {
            get { return player; }
        }
        Player player;


        public List<Zombie> Zombies
        {
            get { return zombies; }
        }
        private List<Zombie> zombies = new List<Zombie>();

        private Vector2 start;

        //public TimeSpan TimeRemaining
        //{
        //    get { return timeRemaining; }
        //}
        //TimeSpan timeRemaining;

        public ContentManager Content
        {
            get { return content; }
        }
        ContentManager content;

        #region Loading

        public Map(IServiceProvider serviceProvider, Stream fileStream)
        {
            // Create a new content manager to load content used just by this level.
            content = new ContentManager(serviceProvider, "Content");

            projectileManager = new ProjectileManager(this);
            //timeRemaining = TimeSpan.FromMinutes(2.0);
            Random rand = new Random();
            LoadTiles(fileStream);

            for (int zombie = 0; zombie < 10; zombie++)
            {
                int x = rand.Next(this.Width);
                int y = rand.Next(this.Height);
                LoadEnemyTile(x, y, "Zombie");
            }
            // Load background layer textures. For now, all levels must
            // use the same backgrounds and only use the left-most part of them.
            //layers = new Texture2D[3];
            //for (int i = 0; i < layers.Length; ++i)
            //{
            //    // Choose a random segment if each background layer for level variety.
            //    int segmentIndex = levelIndex;
            //    layers[i] = Content.Load<Texture2D>("Backgrounds/Layer" + i + "_" + segmentIndex);
            //}

            // Load sounds.
            //exitReachedSound = Content.Load<SoundEffect>("Sounds/ExitReached");
        }

        private void LoadTiles(Stream fileStream)
        {
            // Load the level and ensure all of the lines are the same length.
            int width;
            List<string> lines = new List<string>();
            using (StreamReader reader = new StreamReader(fileStream))
            {
                string line = reader.ReadLine();
                width = line.Length;
                while (line != null)
                {
                    lines.Add(line);
                    if (line.Length != width)
                        throw new Exception(String.Format("The length of line {0} is different from all preceeding lines.", lines.Count));
                    line = reader.ReadLine();
                }
            }

            // Allocate the tile grid.
            tiles = new Tile[width, lines.Count];

            // Loop over every tile position,
            for (int y = 0; y < Height; ++y)
            {
                for (int x = 0; x < Width; ++x)
                {
                    // to load each tile.
                    char tileType = lines[y][x];
                    tiles[x, y] = LoadTile(tileType, x, y);
                }
            }

            // Verify that the level has a beginning and an end.
            //if (Player == null)
            //    throw new NotSupportedException("A level must have a starting point.");
        }


        private Tile LoadTile(char tileType, int x, int y)
        {
            switch (tileType)
            {
                //Ground
                case 'G':
                    return LoadTile("Ground", TileType.Ground);

                //Wall
                case '#':
                    return LoadTile("Wall", TileType.Wall);

                // Various zombies
                //case 'A':
                //    return LoadEnemyTile(x, y, "MonsterA");
                //case 'B':
                //    return LoadEnemyTile(x, y, "MonsterB");
                //case 'C':
                //    return LoadEnemyTile(x, y, "MonsterC");
                //case 'D':
                //    return LoadEnemyTile(x, y, "MonsterD");

                //// Platform block
                //case '~':
                //    return LoadVarietyTile("BlockB", 2, TileType.Wall);

                //// Passable block
                //case ':':
                //    return LoadVarietyTile("BlockB", 2, TileType.Passable);

                // Player 1 start point
                case '1':
                    return LoadStartTile(x, y);

                //// Impassable block
                //case '#':
                //    return LoadVarietyTile("BlockA", 7, TileType.Impassable);

                // Unknown tile type character
                default:
                    throw new NotSupportedException(String.Format("Unsupported tile type character '{0}' at position {1}, {2}.", tileType, x, y));
            }
        }

        private Tile LoadTile(string name, TileType collision)
        {
            return new Tile(Content.Load<Texture2D>("Tiles/" + name), collision);
        }

        //private Tile LoadVarietyTile(string baseName, int variationCount, TileType collision)
        //{
        //    int index = random.Next(variationCount);
        //    return LoadTile(baseName + index, collision);
        //}

        private Tile LoadStartTile(int x, int y)
        {
            if (Player != null)
                throw new NotSupportedException("A level may only have one starting point.");

            start = RectangleExtensions.GetBottomCenter(GetBounds(x, y));
            player = new Player(this, start);

            return new Tile(Content.Load<Texture2D>("Tiles/Ground"), TileType.Ground);
        }

        //private Tile LoadExitTile(int x, int y)
        //{
        //    if (exit != InvalidPosition)
        //        throw new NotSupportedException("A level may only have one exit.");

        //    exit = GetBounds(x, y).Center;

        //    return LoadTile("Exit", TileType.Passable);
        //}

        private Tile LoadEnemyTile(int x, int y, string spriteSet)
        {
            Vector2 position = RectangleExtensions.GetBottomCenter(GetBounds(x, y));
            zombies.Add(new Zombie(this, position, spriteSet));

            return new Tile(Content.Load<Texture2D>("Tiles/Ground"), TileType.Ground);
        }

        public void Dispose()
        {
            Content.Unload();
        }
        #endregion

        #region Bounds and collision

        /// <summary>
        /// Gets the collision mode of the tile at a particular location.
        /// This method handles tiles outside of the levels boundries by making it
        /// impossible to escape past the left or right edges, but allowing things
        /// to jump beyond the top of the level and fall off the bottom.
        /// </summary>
        public TileType GetCollision(int x, int y)
        {
            // Prevent escaping past the level ends.
            if (x < 0 || x >= Width || y < 0 || y >= Height)
                return TileType.Wall;

            return tiles[x, y].Type;
        }

        /// <summary>
        /// Gets the bounding rectangle of a tile in world space.
        /// </summary>        
        public Rectangle GetBounds(int x, int y)
        {
            return new Rectangle(x * Tile.Width, y * Tile.Height, Tile.Width, Tile.Height);
        }

        /// <summary>
        /// Width of level measured in tiles.
        /// </summary>
        public int Width
        {
            get { return tiles.GetLength(0); }
        }

        /// <summary>
        /// Height of the level measured in tiles.
        /// </summary>
        public int Height
        {
            get { return tiles.GetLength(1); }
        }
        #endregion

        #region Update

        /// <summary>
        /// Updates all objects in the world, performs collision between them,
        /// and handles the time limit with scoring.
        /// </summary>
        public void Update(
            GameTime gameTime,
            KeyboardState keyboardState,
            MouseState mouseState,
            Vector2 mousePosition,
            //TouchCollection touchState,
            //AccelerometerState accelState,
            DisplayOrientation orientation)
        {
            // Pause while the player is dead or time is expired.
            if (!Player.IsAlive)//|| TimeRemaining == TimeSpan.Zero)
            {
                // Still want to perform physics on the player.
                Player.ApplyPhysics(gameTime);
            }
            //else if (ReachedExit)
            //{
            //    // Animate the time being converted into points.
            //    int seconds = (int)Math.Round(gameTime.ElapsedGameTime.TotalSeconds * 100.0f);
            //    seconds = Math.Min(seconds, (int)Math.Ceiling(TimeRemaining.TotalSeconds));
            //    timeRemaining -= TimeSpan.FromSeconds(seconds);
            //    score += seconds * PointsPerSecond;
            //}
            else
            {
                //timeRemaining -= gameTime.ElapsedGameTime;
                Player.Update(gameTime, keyboardState, mouseState, mousePosition, orientation);
                //UpdateGems(gameTime);

                // Falling off the bottom of the level kills the player.
                //if (Player.BoundingRectangle.Top >= Height * Tile.Height)
                //    OnPlayerKilled(null);
                projectileManager.Update(gameTime);
                UpdateEnemies(gameTime);

                // The player has reached the exit if they are standing on the ground and
                // his bounding rectangle contains the center of the exit tile. They can only
                // exit when they have collected all of the gems.
                //if (Player.IsAlive &&
                //    Player.IsOnGround &&
                //    Player.BoundingRectangle.Contains(exit))
                //{
                //    OnExitReached();
                //}
            }

            // Clamp the time remaining at zero.
            //if (timeRemaining < TimeSpan.Zero)
            //    timeRemaining = TimeSpan.Zero;
        }

        /// <summary>
        /// Animates each gem and checks to allows the player to collect them.
        /// </summary>
        //private void UpdateGems(GameTime gameTime)
        //{
        //    for (int i = 0; i < gems.Count; ++i)
        //    {
        //        Gem gem = gems[i];

        //        gem.Update(gameTime);

        //        if (gem.BoundingCircle.Intersects(Player.BoundingRectangle))
        //        {
        //            gems.RemoveAt(i--);
        //            OnGemCollected(gem, Player);
        //        }
        //    }
        //}

        /// <summary>
        /// Animates each enemy and allow them to kill the player.
        /// </summary>
        private void UpdateEnemies(GameTime gameTime)
        {
            foreach (Zombie enemy in zombies)
            {
                enemy.Update(gameTime);

                // Touching an enemy instantly kills the player
                //if (enemy.BoundingRectangle.Intersects(Player.BoundingRectangle))
                //{
                //    OnPlayerKilled(enemy);
                //}
            }
        }

        /// <summary>
        /// Called when a gem is collected.
        /// </summary>
        /// <param name="gem">The gem that was collected.</param>
        /// <param name="collectedBy">The player who collected this gem.</param>
        //private void OnGemCollected(Gem gem, Player collectedBy)
        //{
        //    score += Gem.PointValue;

        //    gem.OnCollected(collectedBy);
        //}

        /// <summary>
        /// Called when the player is killed.
        /// </summary>
        /// <param name="killedBy">
        /// The enemy who killed the player. This is null if the player was not killed by an
        /// enemy, such as when a player falls into a hole.
        /// </param>
        //private void OnPlayerKilled(Enemy killedBy)
        //{
        //    Player.OnKilled(killedBy);
        //}

        /// <summary>
        /// Called when the player reaches the level's exit.
        /// </summary>
        //private void OnExitReached()
        //{
        //    Player.OnReachedExit();
        //    exitReachedSound.Play();
        //    reachedExit = true;
        //}

        /// <summary>
        /// Restores the player to the starting point to try the level again.
        /// </summary>
        public void StartNewLife()
        {
            Player.Reset(start);
        }
        #endregion

        #region Draw

        /// <summary>
        /// Draw everything in the level from background to foreground.
        /// </summary>
        public void Draw(GameTime gameTime, SpriteBatch spriteBatch)
        {
            //for (int i = 0; i <= EntityLayer; ++i)
            //    spriteBatch.Draw(layers[i], Vector2.Zero, Color.White);

            DrawTiles(spriteBatch);

            projectileManager.Draw(gameTime,spriteBatch);
            //foreach (Gem gem in gems)
            //    gem.Draw(gameTime, spriteBatch);

            Player.Draw(gameTime, spriteBatch);

            foreach (Zombie enemy in zombies)
                enemy.Draw(gameTime, spriteBatch);

            //for (int i = EntityLayer + 1; i < layers.Length; ++i)
            //    spriteBatch.Draw(layers[i], Vector2.Zero, Color.White);
        }

        /// <summary>
        /// Draws each tile in the level.
        /// </summary>
        private void DrawTiles(SpriteBatch spriteBatch)
        {
            // For each tile position
            for (int y = 0; y < Height; ++y)
            {
                for (int x = 0; x < Width; ++x)
                {
                    // If there is a visible tile in that position
                    Texture2D texture = tiles[x, y].Texture;
                    if (texture != null)
                    {
                        // Draw it in screen space.
                        Vector2 position = new Vector2(x, y) * Tile.Size;
                        spriteBatch.Draw(texture, position, Color.White);
                    }
                }
            }
        }

        #endregion
    }
}
